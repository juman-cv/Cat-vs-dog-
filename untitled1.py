# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12PEOn1fXJBRgz4WG0u9yjsp24XGHjbz_
"""

# backend/train_model.py
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import os

# Load and preprocess the data
train_dir = 'dataset/training_set'
val_dir = 'dataset/validation_set'

img_size = (128, 128)
batch_size = 32

train_datagen = ImageDataGenerator(rescale=1./255)
val_datagen = ImageDataGenerator(rescale=1./255)

train_data = train_datagen.flow_from_directory(train_dir,
                                               target_size=img_size,
                                               batch_size=batch_size,
                                               class_mode='binary')

val_data = val_datagen.flow_from_directory(val_dir,
                                           target_size=img_size,
                                           batch_size=batch_size,
                                           class_mode='binary')

# backend/app.py
import numpy as np
import tensorflow as tf
import cv2
from flask import Flask, request, jsonify, render_template
import os

app = Flask(__name__)
model = tf.keras.models.load_model('cat_dog_model.h5')

def preprocess_image(image):
    image = cv2.resize(image, (128, 128))
    image = image.astype('float32') / 255.0
    return np.expand_dims(image, axis=0)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    file = request.files['image']
    npimg = np.frombuffer(file.read(), np.uint8)
    img = cv2.imdecode(npimg, cv2.IMREAD_COLOR)

    processed_img = preprocess_image(img)
    prediction = model.predict(processed_img)[0][0]
    label = 'Dog' if prediction > 0.5 else 'Cat'

    return render_template('index.html', prediction=label)

if __name__ == '__main__':
    app.run(debug=True)

# backend/app.py
import numpy as np
import tensorflow as tf
import cv2
from flask import Flask, request, jsonify, render_template
import os

app = Flask(__name__)
model = tf.keras.models.load_model('cat_dog_model.h5')

def preprocess_image(image):
    image = cv2.resize(image, (128, 128))
    image = image.astype('float32') / 255.0
    return np.expand_dims(image, axis=0)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    file = request.files['image']
    npimg = np.frombuffer(file.read(), np.uint8)
    img = cv2.imdecode(npimg, cv2.IMREAD_COLOR)

    processed_img = preprocess_image(img)
    prediction = model.predict(processed_img)[0][0]
    label = 'Dog' if prediction > 0.5 else 'Cat'

    return render_template('index.html', prediction=label)

if __name__ == '__main__':
    app.run(debug=True)

<!-- templates/index.html -->
<!DOCTYPE html>
<html>
<head>
    <title>Cat vs Dog Classifier</title>
</head>
<body>
    <h2>Upload an image of a cat or dog</h2>
    <form action="/predict" method="post" enctype="multipart/form-data">
        <input type="file" name="image" accept="image/*" required><br><br>
        <input type="submit" value="Predict">
    </form>

    {% if prediction %}
        <h3>Prediction: {{ prediction }}</h3>
    {% endif %}
</body>
</html>

impoimportimporimportimportimportort matplotlib.pyplot as plt
importimportimportimportimportimportimportimportimport
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.title(f"Prediction: {label}")
plt.axis('off')
plt.savefig('static/result.png')

projectproject/
├── backend/
│   ├── app.py
│   ├── train_model.py
│   ├── cat_dog_model.h5
│   └── templates/
│       └── index.html
├── dataset/
│   ├── training_set/
│   │   ├── cats/
│   │   └── dogs/
│   └── validation_set/
│       ├── cats/
│       └── dogs/
└── static/
    └── result.png

And run